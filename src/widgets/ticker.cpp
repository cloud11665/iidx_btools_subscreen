#include <cstdint>
#include <vector>
#include <mutex>

#include "imgui.h"

#include "globals.hpp"
#include "widgets/widgets.hpp"


// CREDIT: https://github.com/dmadison/LED-Segment-ASCII
static const uint32_t SixteenSegmentASCII[96] = {
	0b00000000000000000, /* (space) */
	0b10000000000001100, /* ! */
	0b00000001000000100, /* " */
	0b01010101000111100, /* # */
	0b01010101010111011, /* $ */
	0b01110111010011001, /* % */
	0b01001001101110001, /* & */
	0b00000001000000000, /* ' */
	0b00001010000000000, /* ( */
	0b00100000100000000, /* ) */
	0b01111111100000000, /* * */
	0b01010101000000000, /* + */
	0b00100000000000000, /* , */
	0b01000100000000000, /* - */
	0b10000000000000000, /* . */
	0b00100010000000000, /* / */
	0b00100010011111111, /* 0 */
	0b00000010000001100, /* 1 */
	0b01000100001110111, /* 2 */
	0b00000100000111111, /* 3 */
	0b01000100010001100, /* 4 */
	0b01001000010110011, /* 5 */
	0b01000100011111011, /* 6 */
	0b00000000000001111, /* 7 */
	0b01000100011111111, /* 8 */
	0b01000100010111111, /* 9 */
	0b00010001000000000, /* : */
	0b00100001000000000, /* ; */
	0b01001010000000000, /* < */
	0b01000100000110000, /* = */
	0b00100100100000000, /* > */
	0b10010100000000111, /* ? */
	0b00000101011110111, /* @ */
	0b01000100011001111, /* A */
	0b00010101000111111, /* B */
	0b00000000011110011, /* C */
	0b00010001000111111, /* D */
	0b01000000011110011, /* E */
	0b01000000011000011, /* F */
	0b00000100011111011, /* G */
	0b01000100011001100, /* H */
	0b00010001000110011, /* I */
	0b00000000001111100, /* J */
	0b01001010011000000, /* K */
	0b00000000011110000, /* L */
	0b00000010111001100, /* M */
	0b00001000111001100, /* N */
	0b00000000011111111, /* O */
	0b01000100011000111, /* P */
	0b00001000011111111, /* Q */
	0b01001100011000111, /* R */
	0b01000100010111011, /* S */
	0b00010001000000011, /* T */
	0b00000000011111100, /* U */
	0b00100010011000000, /* V */
	0b00101000011001100, /* W */
	0b00101010100000000, /* X */
	0b01000100010111100, /* Y */
	0b00100010000110011, /* Z */
	0b00010001000010010, /* [ */
	0b00001000100000000, /* \ */
	0b00010001000100001, /* ] */
	0b00101000000000000, /* ^ */
	0b00000000000110000, /* _ */
	0b00000000100000000, /* ` */
	0b01010000001110000, /* a */
	0b01010000011100000, /* b */
	0b01000000001100000, /* c */
	0b00010100000011100, /* d */
	0b01100000001100000, /* e */
	0b01010101000000010, /* f */
	0b01010001010100001, /* g */
	0b01010000011000000, /* h */
	0b00010000000000000, /* i */
	0b00010001001100000, /* j */
	0b00011011000000000, /* k */
	0b00000000011000000, /* l */
	0b01010100001001000, /* m */
	0b01010000001000000, /* n */
	0b01010000001100000, /* o */
	0b01000001011000001, /* p */
	0b01010001010000001, /* q */
	0b01000000001000000, /* r */
	0b01010000010100001, /* s */
	0b01000000011100000, /* t */
	0b00010000001100000, /* u */
	0b00100000001000000, /* v */
	0b00101000001001000, /* w */
	0b00101010100000000, /* x */
	0b00000101000011100, /* y */
	0b01100000000100000, /* z */
	0b01010001000010010, /* { */
	0b00010001000000000, /* | */
	0b00010101000100001, /* } */
	0b01100110000000000, /* ~ */
	0b00000000000000000, /* (del) */
};

static uint32_t iidx_16seg[256] = { 0 };

static const std::vector<std::vector<ImVec2>> points = {
	{{128, 884}, {304, 884}, {304, 815}, {129, 815}, {89,  855}},
	{{316, 884}, {492, 884}, {531, 855}, {491, 815}, {316, 815}},
	{{541, 848}, {580, 818}, {580, 491}, {540, 451}, {500, 491}, {500, 807}},
	{{540, 434}, {580, 394}, {580, 66 }, {541, 36 }, {500, 77 }, {500, 394}},
	{{316, 69 }, {491, 69 }, {531, 30 }, {492, 0  }, {316, 0  }},
	{{129, 69 }, {304, 69 }, {304, 0  }, {128, 0  }, {89,  30}},
	{{80,  434}, {121, 394}, {121, 77 }, {80,  36 }, {40,  66 }, {40,  394}},
	{{80,  848}, {121, 807}, {121, 491}, {80,  451}, {40,  491}, {40,  818}},
	{{132, 804}, {183, 804}, {259, 579}, {259, 494}, {207, 494}, {132, 719}},
	{{270, 804}, {351, 804}, {351, 494}, {311, 450}, {270, 494}},
	{{489, 804}, {489, 719}, {414, 494}, {362, 494}, {362, 579}, {438, 804}},
	{{354, 484}, {491, 484}, {532, 444}, {491, 404}, {354, 404}, {318, 441}},
	{{361, 390}, {413, 390}, {488, 165}, {488, 80 }, {437, 80 }, {361, 305}},
	{{311, 436}, {351, 392}, {351, 82 }, {270, 82 }, {270, 392}},
	{{259, 390}, {259, 305}, {183, 80 }, {132, 80 }, {132, 165}, {207, 390}},
	{{131, 484}, {268, 484}, {304, 441}, {268, 404}, {131, 404}, {90,  444}},
};

auto ticker::build_segment_font() -> void
{
	int32_t ua = (1 << 0);
	int32_t ub = (1 << 1);
	int32_t uc = (1 << 2);
	int32_t ud = (1 << 3);
	int32_t ue = (1 << 4);
	int32_t uf = (1 << 5);
	int32_t ug = (1 << 6);
	int32_t uh = (1 << 7);
	int32_t uk = (1 << 8);
	int32_t um = (1 << 9);
	int32_t un = (1 << 10);
	int32_t up = (1 << 11);
	int32_t ur = (1 << 12);
	int32_t us = (1 << 13);
	int32_t ut = (1 << 14);
	int32_t uu = (1 << 15);

	for (int i = 0; i < 96; i++)
	{
		iidx_16seg[i + ' '] = SixteenSegmentASCII[i];
	}

	iidx_16seg['B'] = ua | ub | ue | uf | ug | uh | un | ur | uu;
	iidx_16seg['D'] = uc | ud | ue | uf | ug | uu | up;
	iidx_16seg['E'] = ua | ub | uu | up | uf | ue | uh | ug;
	iidx_16seg['!'] = ub | un | um | uf;
	iidx_16seg['Y'] = uk | un | us;
	iidx_16seg['?'] = ua | ub | un | uf;
	iidx_16seg['.'] = uf;
}

static auto draw_char(
	ImDrawList* dl,
	ImVec2 cpos,
	uint32_t c,
	float size,
	float scale_x = 0.9f,
	float shear = 0.1f
) -> void
{
	int i = -1;
	for (auto plist : points)
	{
		i++;

		for (auto& p : plist)
		{
			p.x = p.x + shear * p.y;
			p.x = p.x * scale_x;
			p.y = 884.f - p.y;
			p = p * (size / 884.f);
			p = cpos + p;
		}
		if (!(c & (1 << i)))
			dl->AddConvexPolyFilled(plist.data(), plist.size(), ticker::color_seg_on);
		else
			dl->AddConvexPolyFilled(plist.data(), plist.size(), ticker::color_seg_off);
	}
}

auto ticker::draw_ticker_window() -> void
{
	ImVec2 wsize = { 9 * 140 + 20, 220 };

	ImGuiViewport* main_viewport = ImGui::GetMainViewport();
	ImVec2 view_sz = main_viewport->Size;

	ImGui::SetNextWindowSize(wsize);
	ImGui::SetNextWindowPos({ (view_sz.x - wsize.x ) / 2, 100});

	ImGuiWindowFlags wflags = 0
		| ImGuiWindowFlags_NoTitleBar
		| ImGuiWindowFlags_NoResize
		| ImGuiWindowFlags_NoMove
		| ImGuiWindowFlags_NoScrollbar
	;
	ImGui::Begin("ticker_window", nullptr, wflags);

	ImVec2 cpos = ImGui::GetCursorScreenPos();
	ImDrawList* dl = ImGui::GetWindowDrawList();

	std::scoped_lock<std::mutex> l(g_vefxio_ticker_mutex);
	
	std::string text = g_vefxio_ticker_text;
	for (int i=0; i<9; i++)
	{
		char c = ' ';
		if (i < (int)text.size())
		{
			c = text[i];
		}
		if (c == 'm') c = '.';
		if (c == 'q') c = '\'';
		draw_char(dl, cpos, iidx_16seg[c], 200.f);
		cpos.x += 140.f;
	}
	ImGui::End();
}
